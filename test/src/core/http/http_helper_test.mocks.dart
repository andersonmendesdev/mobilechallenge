// Mocks generated by Mockito 5.3.2 from annotations
// in mobilechallenge/test/src/core/http/http_helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mobilechallenge/src/core/http/http_helper.dart' as _i3;
import 'package:mobilechallenge/src/core/http/http_request_parameters.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HTTPHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHTTPHelper extends _i1.Mock implements _i3.HTTPHelper {
  @override
  _i4.Future<String> utfdecode(_i5.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #utfdecode,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<dynamic> jsonDecod(String? decodedutf8) => (super.noSuchMethod(
        Invocation.method(
          #jsonDecod,
          [decodedutf8],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<_i2.Response> getClientHttp(_i6.HttpRequestParameters? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClientHttp,
          [params],
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getClientHttp,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getClientHttp,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Response>);
  @override
  _i4.Future<Uri> getURi(_i6.HttpRequestParameters? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getURi,
          [params],
        ),
        returnValue: _i4.Future<Uri>.value(_FakeUri_1(
          this,
          Invocation.method(
            #getURi,
            [params],
          ),
        )),
        returnValueForMissingStub: _i4.Future<Uri>.value(_FakeUri_1(
          this,
          Invocation.method(
            #getURi,
            [params],
          ),
        )),
      ) as _i4.Future<Uri>);
}
